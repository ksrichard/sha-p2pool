syntax = "proto3";

package tari.p2pool.sharechain.rpc;

// The BlockHeader contains all the metadata for the block, including proof of work, a link to the previous block
// and the transaction kernels.
message TariBlockHeader {
  // The hash of the block
  bytes hash = 1;
  // Version of the block
  uint32 version = 2;
  // Height of this block since the genesis block (height 0)
  uint64 height = 3;
  // Hash of the block previous to this in the chain.
  bytes prev_hash = 4;
  // Timestamp at which the block was built.
  uint64 timestamp = 5;
  // This is the UTXO merkle root of the outputs
  // This is calculated as Hash (txo MMR root  || roaring bitmap hash of UTXO indices)
  bytes output_mr = 6;
  // This is the MMR root of the kernels
  bytes kernel_mr = 8;
  // This is the Merkle root of the inputs in this block
  bytes input_mr = 9;
  // Total accumulated sum of kernel offsets since genesis block. We can derive the kernel offset sum for *this*
  // block from the total kernel offset of the previous block header.
  bytes total_kernel_offset = 10;
  // Nonce increment used to mine this block.
  uint64 nonce = 11;
  // Proof of work metadata
  ProofOfWork pow = 12;
  // Kernel MMR size
  uint64 kernel_mmr_size = 13;
  // Output MMR size
  uint64 output_mmr_size = 14;
  // Sum of script offsets for all kernels in this block.
  bytes total_script_offset = 15;
  // Merkle root of validator nodes
  bytes validator_node_mr = 16;
  // Validator size
  uint64 validator_node_size = 17;
}

// The proof of work data structure that is included in the block header.
message ProofOfWork {
  // The algorithm used to mine this block
  //   0 = Monero
  //   1 = Sha3X
  uint64 pow_algo = 1;
  // Supplemental proof of work data. For example for Sha3x, this would be empty (only the block header is
  // required), but for Monero merge mining we need the Monero block header and RandomX seed hash.
  bytes pow_data = 4;
}

//This is used to request the which pow algo should be used with the block template
message PowAlgo {
  // The permitted pow algorithms
  enum PowAlgos {
    POW_ALGOS_RANDOMX = 0;    // Accessible as `grpc::pow_algo::PowAlgos::Randomx`
    POW_ALGOS_SHA3X = 1;      // Accessible as `grpc::pow_algo::PowAlgos::Sha3x`
  }
  // The pow algo to use
  PowAlgos pow_algo = 1;
}


// A Share chain block. Blocks are linked together into a blockchain.
message Block {
  // The hash of the block
  bytes hash = 1;

  // Hash of the block previous to this in the share chain.
  bytes prev_hash = 2;

  // Height of this block since the genesis block (height 0)
  uint64 height = 3;

  // The original header of the block on the main Tari network, we need this to validate original block
  // and calculate current block's hash to do another round of validation.
  TariBlockHeader original_block_header = 4;

  // All the miners working on this block, all of them included in the resulting block if mined and submitted t mai chain.
  repeated string miners = 5;

  // TODO: add other relevant fields
}


